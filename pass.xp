local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Configurações
local Config = {
    AutoFarmXP = true,
    XPPerAction = 100,
    FarmInterval = 1,
    TestMode = true,
    CurrentWorkingMethod = nil
}

-- Utilitários XP
local XPUtils = {
    XP_CONSTANT = 100,
    MAX_LEVEL = 100,
    
    CalculateLevel = function(xp)
        return math.floor(math.sqrt(xp / XPUtils.XP_CONSTANT))
    end,
    
    CalculateXPForLevel = function(level)
        return XPUtils.XP_CONSTANT * level ^ 2
    end,
    
    GetXPToNextLevel = function(currentXP)
        local currentLevel = math.floor(math.sqrt(currentXP / XPUtils.XP_CONSTANT))
        local xpCurrentLevel = XPUtils.XP_CONSTANT * currentLevel ^ 2
        local xpNextLevel = XPUtils.XP_CONSTANT * (currentLevel + 1) ^ 2
        return (xpNextLevel - xpCurrentLevel) - (currentXP - xpCurrentLevel)
    end,
    
    GetCurrentLevelProgress = function(currentXP)
        local currentLevel = math.floor(math.sqrt(currentXP / XPUtils.XP_CONSTANT))
        local xpCurrentLevel = XPUtils.XP_CONSTANT * currentLevel ^ 2
        local xpNextLevel = XPUtils.XP_CONSTANT * (currentLevel + 1) ^ 2
        local xpInLevel = currentXP - xpCurrentLevel
        local xpNeeded = xpNextLevel - xpCurrentLevel
        return (xpInLevel / xpNeeded) * 100
    end,
    
    FormatNumber = function(num)
        if num >= 1e12 then return string.format("%.2fT", num / 1e12)
        elseif num >= 1e9 then return string.format("%.2fB", num / 1e9)
        elseif num >= 1e6 then return string.format("%.2fM", num / 1e6)
        elseif num >= 1e3 then return string.format("%.2fk", num / 1e3)
        else return tostring(num) end
    end
}

-- Sistema de detecção de Remotes
local RemoteScanner = {
    FoundRemotes = {},
    
    ScanAll = function(self)
        print("\n[SCANNER] Iniciando varredura de RemoteEvents...")
        self.FoundRemotes = {}
        
        local locations = {
            ReplicatedStorage,
            ReplicatedStorage:FindFirstChild("Remotes"),
            ReplicatedStorage:FindFirstChild("GameEvents"),
            ReplicatedStorage:FindFirstChild("Events"),
            ReplicatedStorage:FindFirstChild("Network"),
            ReplicatedStorage:FindFirstChild("Data"),
            ReplicatedStorage:FindFirstChild("Networking")
        }
        
        for _, location in pairs(locations) do
            if location then
                for _, obj in pairs(location:GetDescendants()) do
                    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                        local name = obj.Name:lower()
                        local path = obj:GetFullName()
                        
                        if name:match("season") or name:match("battle") or name:match("pass") or 
                           name:match("xp") or name:match("exp") or name:match("progress") or
                           name:match("claim") or name:match("reward") or name:match("level") then
                            table.insert(self.FoundRemotes, {
                                Object = obj,
                                Name = obj.Name,
                                Path = path,
                                Type = obj.ClassName
                            })
                            print(string.format("[SCANNER] ✓ Encontrado: %s (%s)", obj.Name, obj.ClassName))
                        end
                    end
                end
            end
        end
        
        print(string.format("[SCANNER] Total encontrado: %d remotes", #self.FoundRemotes))
        return self.FoundRemotes
    end
}

-- Sistema de Testes Multi-Método
local MethodTester = {
    TestResults = {},
    CurrentXPBefore = 0,
    
    -- Métodos de teste (mantidos iguais, apenas listando um para exemplo, outros seguem o mesmo padrão)
    Method1_DirectPlayerQuantity = function(self, remote, xpAmount)
        local success, err = pcall(function()
            if remote.Type == "RemoteEvent" then
                remote.Object:FireServer(LocalPlayer, xpAmount)
            else
                remote.Object:InvokeServer(LocalPlayer, xpAmount)
            end
        end)
        return success, err
    end,
    -- (Outros métodos mantidos: Method2_PlayerTable, Method3_CommandStructure, ..., Method10_StringCommand)

    GetCurrentXP = function(self)
        local xp = 0
        
        xp = LocalPlayer:GetAttribute("SeasonPassXP") or 
             LocalPlayer:GetAttribute("BattlePassXP") or
             LocalPlayer:GetAttribute("PassXP") or
             LocalPlayer:GetAttribute("XP")
        
        if xp and xp > 0 then return xp end
        
        local playerData = ReplicatedStorage:FindFirstChild("PlayerData")
        if playerData then
            local data = playerData:FindFirstChild(LocalPlayer.Name)
            if data then
                xp = data:GetAttribute("SeasonPassXP") or data:GetAttribute("XP")
                if xp and xp > 0 then return xp end
            end
        end
        
        if LocalPlayer.Character then
            xp = LocalPlayer.Character:GetAttribute("SeasonPassXP") or
                 LocalPlayer.Character:GetAttribute("XP")
            if xp and xp > 0 then return xp end
        end
        
        return 0
    end,
    
    TestAllMethods = function(self, remote, xpAmount)
        local methods = {
            {Name = "DirectPlayerQuantity", Func = self.Method1_DirectPlayerQuantity},
            {Name = "PlayerTable", Func = self.Method2_PlayerTable},
            {Name = "CommandStructure", Func = self.Method3_CommandStructure},
            {Name = "OnlyQuantity", Func = self.Method4_OnlyQuantity},
            {Name = "UserIdQuantity", Func = self.Method5_UserIdQuantity},
            {Name = "NameQuantity", Func = self.Method6_NameQuantity},
            {Name = "DataStructure", Func = self.Method7_DataStructure},
            {Name = "MultipleArgs", Func = self.Method8_MultipleArgs},
            {Name = "ActionParams", Func = self.Method9_ActionParams},
            {Name = "StringCommand", Func = self.Method10_StringCommand}
        }
        
        print(string.format("\n[TESTER] Testando remote: %s", remote.Name))
        print(string.format("[TESTER] Path: %s", remote.Path))
        
        for i, method in ipairs(methods) do
            local xpBefore = self:GetCurrentXP()
            wait(0.3)
            
            local success, err = method.Func(self, remote, xpAmount)
            
            wait(0.5)
            local xpAfter = self:GetCurrentXP()
            local xpGained = xpAfter - xpBefore
            
            local result = {
                RemoteName = remote.Name,
                RemotePath = remote.Path,
                MethodName = method.Name,
                MethodNumber = i,
                Success = success,
                Error = err,
                XPBefore = xpBefore,
                XPAfter = xpAfter,
                XPGained = xpGained,
                Worked = xpGained > 0
            }
            
            table.insert(self.TestResults, result)
            
            local status = result.Worked and "✓ SUCESSO!" or (success and "✗ Executou mas sem XP" or "✗ FALHA")
            print(string.format("[MÉTODO %d] %s - %s", i, method.Name, status))
            if result.Worked then
                print(string.format("  → XP Ganho: %s (de %s para %s)", 
                    XPUtils.FormatNumber(xpGained),
                    XPUtils.FormatNumber(xpBefore),
                    XPUtils.FormatNumber(xpAfter)
                ))
            end
            if err then
                print(string.format("  → Erro: %s", tostring(err)))
            end
        end
    end,
    
    GetWorkingMethods = function(self)
        local working = {}
        for _, result in pairs(self.TestResults) do
            if result.Worked then
                table.insert(working, result)
            end
        end
        return working
    end,
    
    GenerateReport = function(self)
        print("\n" .. string.rep("=", 60))
        print("             RELATÓRIO DE TESTES - XP FARM")
        print(string.rep("=", 60))
        
        local working = self:GetWorkingMethods()
        
        print(string.format("\n✓ MÉTODOS QUE FUNCIONARAM: %d", #working))
        if #working > 0 then
            for i, result in ipairs(working) do
                print(string.format("\n[%d] %s", i, result.MethodName))
                print(string.format("    Remote: %s", result.RemoteName))
                print(string.format("    Path: %s", result.RemotePath))
                print(string.format("    XP Ganho: %s", XPUtils.FormatNumber(result.XPGained)))
                print(string.format("    Código para copiar: %s", self:GetMethodCode(result)))
            end
        else
            print("    Nenhum método funcionou :(")
        end
        
        print(string.format("\n✗ Total de testes: %d", #self.TestResults))
        print(string.format("✓ Taxa de sucesso: %.1f%%", (#working / #self.TestResults) * 100))
        print(string.rep("=", 60) .. "\n")
        
        return working
    end,
    
    GetMethodCode = function(self, result)
        local remote = nil
        for _, r in pairs(RemoteScanner.FoundRemotes) do
            if r.Name == result.RemoteName then
                remote = r
                break
            end
        end
        if not remote then return "Remote não encontrado" end
        
        local methodName = "Method" .. result.MethodNumber .. "_" .. result.MethodName
        local method = self[methodName]
        if not method then return "Método não encontrado" end
        
        -- Gera o código para o método funcional
        local code = string.format([[
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Remote = ReplicatedStorage:FindFirstChild("%s")
if Remote then
    %s
end
]], 
            result.RemotePath,
            methodName == "Method1_DirectPlayerQuantity" and string.format("Remote:%s(LocalPlayer, %d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method2_PlayerTable" and string.format("Remote:%s({LocalPlayer}, %d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method3_CommandStructure" and string.format("Remote:%s({Name = 'progressseasonpass', Args = {{Type = 'players', Name = 'to', Value = {LocalPlayer}}, {Type = 'integer', Name = 'quantity', Value = %d}}})", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method4_OnlyQuantity" and string.format("Remote:%s(%d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method5_UserIdQuantity" and string.format("Remote:%s(LocalPlayer.UserId, %d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method6_NameQuantity" and string.format("Remote:%s(LocalPlayer.Name, %d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method7_DataStructure" and string.format("Remote:%s({Player = LocalPlayer, Amount = %d, Type = 'XP'})", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method8_MultipleArgs" and string.format("Remote:%s('ProgressSeasonPass', LocalPlayer, %d)", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method9_ActionParams" and string.format("Remote:%s('AddXP', {player = LocalPlayer, amount = %d})", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", Config.XPPerAction) or
            methodName == "Method10_StringCommand" and string.format("Remote:%s('progressseasonpass %s %d')", remote.Type == "RemoteEvent" and "FireServer" or "InvokeServer", LocalPlayer.Name, Config.XPPerAction)
        )
        return code
    end
}

-- Sistema de Farm
local FarmSystem = {
    Active = false,
    WorkingMethod = nil,
    WorkingRemote = nil,
    Stats = {
        TotalXPGained = 0,
        FarmCycles = 0,
        StartTime = 0
    },
    
    SetWorkingMethod = function(self, methodResult)
        self.WorkingMethod = methodResult
        self.WorkingRemote = methodResult.RemoteName
        Config.CurrentWorkingMethod = methodResult.MethodName
        print(string.format("\n[FARM] Método configurado: %s no remote %s", 
            methodResult.MethodName, methodResult.RemoteName))
    end,
    
    Start = function(self)
        if not self.WorkingMethod then
            print("[FARM] ✗ Nenhum método configurado! Execute os testes primeiro.")
            return
        end
        
        self.Active = true
        self.Stats.StartTime = tick()
        print("[FARM] ✓ Farm iniciado!")
        
        spawn(function()
            while self.Active do
                local success, err = pcall(function()
                    self:ExecuteFarm()
                end)
                
                if not success then
                    warn("[FARM] Erro no ciclo:", err)
                end
                
                wait(Config.FarmInterval)
            end
        end)
    end,
    
    Stop = function(self)
        self.Active = false
        print("[FARM] Farm parado!")
        self:ShowStats()
    end,
    
    ExecuteFarm = function(self)
        local xpBefore = MethodTester:GetCurrentXP()
        
        local remote = nil
        for _, r in pairs(RemoteScanner.FoundRemotes) do
            if r.Name == self.WorkingRemote then
                remote = r
                break
            end
        end
        
        if not remote then
            warn("[FARM] Remote não encontrado!")
            return
        end
        
        local methodName = "Method" .. self.WorkingMethod.MethodNumber .. "_" .. self.WorkingMethod.MethodName
        local method = MethodTester[methodName]
        
        if method then
            method(MethodTester, remote, Config.XPPerAction)
        end
        
        wait(0.3)
        local xpAfter = MethodTester:GetCurrentXP()
        local xpGained = xpAfter - xpBefore
        
        if xpGained > 0 then
            self.Stats.TotalXPGained = self.Stats.TotalXPGained + xpGained
            self.Stats.FarmCycles = self.Stats.FarmCycles + 1
            
            local level = XPUtils.CalculateLevel(xpAfter)
            local progress = XPUtils.GetCurrentLevelProgress(xpAfter)
            
            print(string.format("[FARM] +%s XP | Level: %d | Progresso: %.1f%% | Total: %s XP",
                XPUtils.FormatNumber(xpGained),
                level,
                progress,
                XPUtils.FormatNumber(self.Stats.TotalXPGained)
            ))
        end
    end,
    
    ShowStats = function(self)
        local elapsed = tick() - self.Stats.StartTime
        local xpPerSecond = self.Stats.TotalXPGained / elapsed
        
        print("\n" .. string.rep("=", 60))
        print("                  ESTATÍSTICAS DO FARM")
        print(string.rep("=", 60))
        print(string.format("Tempo decorrido: %.1f segundos", elapsed))
        print(string.format("Ciclos de farm: %d", self.Stats.FarmCycles))
        print(string.format("XP total ganho: %s", XPUtils.FormatNumber(self.Stats.TotalXPGained)))
        print(string.format("XP por segundo: %s", XPUtils.FormatNumber(xpPerSecond)))
        print(string.rep("=", 60) .. "\n")
    end
}

-- GUI Simplificada
local function CreateGUI()
    if game.CoreGui:FindFirstChild("SeasonPassTesterGUI") then
        game.CoreGui.SeasonPassTesterGUI:Destroy()
    end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "SeasonPassTesterGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local Frame = Instance.new("Frame")
    Frame.Name = "MainFrame"
    Frame.Size = UDim2.new(0, 350, 0, 400)
    Frame.Position = UDim2.new(0.5, -175, 0.5, -200)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    Frame.BorderSizePixel = 2
    Frame.BorderColor3 = Color3.fromRGB(60, 60, 80)
    Frame.Active = true
    Frame.Draggable = true
    Frame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 12)
    UICorner.Parent = Frame
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 50)
    Title.Position = UDim2.new(0, 0, 0, 0)
    Title.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
    Title.Text = "🔬 XP FARM TESTER V3.0"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 20
    Title.Font = Enum.Font.GothamBold
    Title.Parent = Frame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 12)
    TitleCorner.Parent = Title
    
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Name = "StatusLabel"
    StatusLabel.Size = UDim2.new(1, -20, 0, 100)
    StatusLabel.Position = UDim2.new(0, 10, 0, 60)
    StatusLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    StatusLabel.Text = "Status: Aguardando...\nAbra console (F9) para logs"
    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    StatusLabel.TextSize = 14
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.TextWrapped = true
    StatusLabel.TextYAlignment = Enum.TextYAlignment.Top
    StatusLabel.Parent = Frame
    
    local StatusCorner = Instance.new("UICorner")
    StatusCorner.CornerRadius = UDim.new(0, 8)
    StatusCorner.Parent = StatusLabel
    
    local LogFrame = Instance.new("ScrollingFrame")
    LogFrame.Name = "LogFrame"
    LogFrame.Size = UDim2.new(1, -20, 0, 180)
    LogFrame.Position = UDim2.new(0, 10, 0, 170)
    LogFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    LogFrame.BorderSizePixel = 0
    LogFrame.ScrollBarThickness = 8
    LogFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    LogFrame.Parent = Frame
    
    local LogListLayout = Instance.new("UIListLayout")
    LogListLayout.Padding = UDim.new(0, 5)
    LogListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    LogListLayout.Parent = LogFrame
    
    local function AddLog(message, color)
        local log = Instance.new("TextLabel")
        log.Size = UDim2.new(1, -10, 0, 20)
        log.BackgroundTransparency = 1
        log.Text = message
        log.TextColor3 = color or Color3.fromRGB(255, 255, 255)
        log.TextSize = 12
        log.Font = Enum.Font.Gotham
        log.TextXAlignment = Enum.TextXAlignment.Left
        log.Parent = LogFrame
        LogFrame.CanvasSize = UDim2.new(0, 0, 0, LogListLayout.AbsoluteContentSize.Y)
    end
    
    local function CreateButton(text, callback, color)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, -20, 0, 45)
        btn.Position = UDim2.new(0, 10, 1, -55)
        btn.BackgroundColor3 = color or Color3.fromRGB(50, 150, 250)
        btn.Text = text
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.TextSize = 14
        btn.Font = Enum.Font.GothamBold
        btn.AutoButtonColor = true
        btn.Parent = Frame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 8)
        btnCorner.Parent = btn
        
        btn.MouseButton1Click:Connect(function()
            btn.BackgroundColor3 = Color3.fromRGB(30, 100, 200)
            wait(0.1)
            btn.BackgroundColor3 = color or Color3.fromRGB(50, 150, 250)
            callback()
        end)
        
        return btn
    end
    
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -35, 0, 10)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 18
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = Frame
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 8)
    CloseCorner.Parent = CloseButton
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Botão único para ativar tudo
    CreateButton("⚡ ATIVAR XP FARM", function()
        if FarmSystem.Active then
            FarmSystem:Stop()
            StatusLabel.Text = "⛔ Farm PARADO\nAbra console (F9) para logs"
            AddLog("Farm parado!", Color3.fromRGB(255, 100, 100))
            return
        end
        
        StatusLabel.Text = "⏳ Escaneando e testando...\nVerifique console (F9)"
        AddLog("Iniciando varredura de remotes...", Color3.fromRGB(100, 150, 255))
        
        -- Escanear remotes
        RemoteScanner:ScanAll()
        AddLog(string.format("Encontrados: %d remotes", #RemoteScanner.FoundRemotes), Color3.fromRGB(100, 255, 100))
        
        if #RemoteScanner.FoundRemotes == 0 then
            StatusLabel.Text = "❌ Nenhum remote encontrado!"
            AddLog("Nenhum remote encontrado!", Color3.fromRGB(255, 100, 100))
            return
        end
        
        -- Testar métodos
        MethodTester.TestResults = {}
        for _, remote in pairs(RemoteScanner.FoundRemotes) do
            MethodTester:TestAllMethods(remote, Config.XPPerAction)
            for _, result in pairs(MethodTester.TestResults) do
                local status = result.Worked and "SUCESSO!" or (result.Success and "Executou sem XP" or "FALHA")
                local color = result.Worked and Color3.fromRGB(100, 255, 100) or (result.Success and Color3.fromRGB(255, 255, 100) or Color3.fromRGB(255, 100, 100))
                AddLog(string.format("[Método %d] %s - %s", result.MethodNumber, result.MethodName, status), color)
                if result.Worked then
                    AddLog(string.format("  XP Ganho: %s", XPUtils.FormatNumber(result.XPGained)), Color3.fromRGB(100, 255, 100))
                end
            end
        end
        
        -- Gerar relatório e configurar método funcional
        local working = MethodTester:GenerateReport()
        if #working > 0 then
            FarmSystem:SetWorkingMethod(working[1])
            StatusLabel.Text = string.format("✅ Farm ATIVO\nMétodo: %s\nRemote: %s", working[1].MethodName, working[1].RemoteName)
            AddLog(string.format("Método configurado: %s no %s", working[1].MethodName, working[1].RemoteName), Color3.fromRGB(255, 165, 0))
            AddLog("Código do método funcional:", Color3.fromRGB(255, 255, 255))
            AddLog(MethodTester:GetMethodCode(working[1]), Color3.fromRGB(200, 200, 200))
            FarmSystem:Start()
        else
            StatusLabel.Text = "❌ Nenhum método funcionou!"
            AddLog("Nenhum método funcionou!", Color3.fromRGB(255, 100, 100))
        end
    end, Color3.fromRGB(50, 200, 50))
    
    ScreenGui.Parent = game.CoreGui
    print("[GUI] Interface criada com sucesso!")
    AddLog("Interface iniciada!", Color3.fromRGB(100, 150, 255))
end

-- Redirecionar prints para a GUI
local oldPrint = print
print = function(...)
    oldPrint(...)
    local message = table.concat({...}, " ")
    if game.CoreGui:FindFirstChild("SeasonPassTesterGUI") then
        local logFrame = game.CoreGui.SeasonPassTesterGUI.MainFrame.LogFrame
        local log = Instance.new("TextLabel")
        log.Size = UDim2.new(1, -10, 0, 20)
        log.BackgroundTransparency = 1
        log.Text = message
        log.TextColor3 = Color3.fromRGB(255, 255, 255)
        log.TextSize = 12
        log.Font = Enum.Font.Gotham
        log.TextXAlignment = Enum.TextXAlignment.Left
        log.Parent = logFrame
        logFrame.CanvasSize = UDim2.new(0, 0, 0, logFrame.UIListLayout.AbsoluteContentSize.Y)
    end
end

-- Inicialização
print([[
╔═══════════════════════════════════════════════════════╗
║       AUTO SEASON PASS XP FARM V3.0 - TESTER         ║
║                                                       ║
║  Pressione INSERT para abrir GUI                     ║
║  Use o botão ATIVAR para iniciar o farm              ║
╚═══════════════════════════════════════════════════════╝
]])

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Insert then
        CreateGUI()
    end
end)

wait(1)
CreateGUI()
